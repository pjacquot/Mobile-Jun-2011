<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
<title>Mobile Jun 2011 - Week 7 Assignment (Patrice Jacquot)</title>
</head>

<body>

<p>Mobile Jun 2011 - <strong>Week 7 Assignment</strong></p>

<p><strong>Student:</strong> pjacquot - Patrice Jacquot</p>

<h1>Assignment: Enhanced Progression</h1>

<p>For this assignment, I will create a web application. It must adapt to various contexts and at least use Web Storage, and work offline.</p>

<h2>Project's purpose</h2>

<p>Every monday evening, I organize a session to play badminton with colleagues.
As the organizer of these recurrent events, I use Google Spreadsheet, but I would like a more practical way to
manage badminton fields reservations and players presence. So, this assignment is the opportunity for me to create
a web application for that. The version proposed in this assignement is the administrator mode of the application.
I will continue to build the application to allow the users to register themselves and to send them email notifications.</p>

<h2>Step 1: Static web pages</h2>

<p>At this step I created two static web pages, one for the list mode and the other for the edition mode.
In this version graphics are designed, using media queries and SVG sprites.
The JavaScript methods are basically implemented but without persistence nor server synchronization.
The session does not correspond to </p>

<p>At this time, the application is composed by the following files:</p>
<dl>
  <dt><a href="step1/list.html"><tt>list.html</tt></a></dt><dd>This is the list of badminton sessions</dd>
  <dt><a href="step1/session.html"><tt>session.html</tt></a></dt><dd>The details of a single session</dd>
  <dt><a href="step1/style-1.css"><tt>style-1.css</tt></a></dt><dd>Adaptative style definition (contains SVG files)</dd>
  <dt><a href="step1/logic-1.js"><tt>logic-1.js</tt></a></dt><dd>JavaScript code with the basic implementation</dd>
</dl>

<a href="step1/list.html">Application after step 1</a>

<h2>Step 2: Dynamically populate pages, hash-navigation and localStorage</h2>

<p>The two html pages <tt>list.html</tt> and <tt>session.html</tt> are merged into a single <tt>index.html</tt> file.</p>
<p>Thanks to the <tt>onhashchange</tt> event, we are able to detect URI changes while staying in the same webpage.
When we navigate to a badminton session, we simply append a hashtag to the URL, for example <tt>#2011-09-05</tt> for 5 September 2011</p>
<p>Because there is no remote database yet, the "Resync" button just clean the localStorage and stores two examples of badminton sessions.</p>
<p>On save, changes are stored into the locastorage and retained even if the browser is restarted.</p>

<a href="step2/">Application after step 2</a>

<h2>Step 3: Configure CouchDB and load player data from it</h2>

<p>To install and start CouchDB on my Debian 6.0, I have only to type this command:</p>
<pre>
apt-get install couchdb
</pre>

<p>Then, I added the following configuration directive in Nginx (as explained in <a href="http://wiki.apache.org/couchdb/Nginx_As_a_Reverse_Proxy">nginx as a Reverse Proxy</a>):</p>
<pre>
# CouchDB
location        ~ /cdb {
 rewrite        ^/cdb/(.*)$ /$1 break;
 proxy_pass     http://localhost:5984;
 proxy_redirect off;
 proxy_set_header Host $host;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 proxy_set_header X-Forwarded-Ssl on;
}
</pre>

<p>Now, the CouchDB API is accessible from <a href="https://patj.eu/cdb/">https://patj.eu/cdb/</a> in a RESTful way.
We will use <tt>curl</tt> commands to interact with the database.
To simplfy the commands, I create a <tt>.curlrc</tt> file with this content:</p>
<pre>--header : "Content-type: application/json"</pre>

<p>Sequence of commands to initialize the database:</p>
<dl>
  <dt>Create "w3c-mobile" database</dt>
  <dd><pre>curl -X PUT https://patj.eu/cdb/w3c-mobile</pre></dd>
  <dt>Add all players defined in <tt><a href="step3/players.json">players.json</a></tt> to database</dd>
  <dd><tt>curl -X POST https://patj.eu/cdb/w3c-mobile -d@players.json</tt></dd>
</dl>
<p>Now, we can load everything with the query
<a href="https://patj.eu/cdb/w3c-mobile/_all_docs?include_docs=true">https://patj.eu/cdb/w3c-mobile/_all_docs?include_docs=true</a></p>

<p>The players list is loaded on application resyncing and at the first access.
The badminton sessions are not yet synchronized.</p>

<a href="step3/">Application after step 3</a>

<h2>Step 4: Add the manifest file</h2>

<p>The following manifest file <a href="step4/badminton.appcache">badminton.appcache</a> has been created:</p>
<pre>
CACHE MANIFEST
# 2011-08-31:v1

style-1.css
logic-1.js

NETWORK:
*
</pre>
<p>I found that it was important to add a * in the <tt>NETWORK</tt> section of the cache manifest, to tell the
browser that the contents from CouchDB (players list) should still be loaded from the network.
When the network is not available, the application takes care to load it from localStorage.</p>

<p>To serve the file with the right content-type, the following entry has been added to Nginx configuration:</p>
<pre>
types {
  text/cache-manifest                   appcache;
}
</pre>

<a href="step4/">Application after step 4</a>

</body>

</html>
